import re

# The MIDI formula derived from LilyPond's internal pitch structure:
# (Octave * 12) + Notename + Alteration + C0_Offset(12)
def calculate_midi(octave, name, alter):
    # name: 0=C, 1=D, ..., 6=B
    # alter: 0=natural, -1=flat, +1=sharp
    return (octave * 12) + name + alter + 12

# Regex to find NoteEvent pitch information
# Finds 'pitch (make-pitch <octave> <alter> <name>)'
PITCH_REGEX = re.compile(
    r"NoteEvent.*?'pitch \(make-pitch\s+(-?\d+)\s+(-?\d+)\s+(\d+)\)"
)

# Regex to find RestEvent
REST_REGEX = re.compile(r"RestEvent")

# Read the file generated by lilypond
try:
    with open("music_data.txt", "r") as f:
        data = f.read().replace('\n', ' ') # Flatten the output for easier regex

except FileNotFoundError:
    print("Error: music_data.txt not found. Did you run lilypond and redirect the output?")
    exit()

# Find all NoteEvent matches
note_matches = PITCH_REGEX.finditer(data)

# Iterate through the matches and print the MIDI values
print("--- Extracted MIDI Values ---")

# We must iterate over all events in the correct order, which is hard 
# with multiple regexes. For a simple list like myMusic, we can match 
# the entire list of elements and iterate over them.

# Find the main list of elements, and then look for events inside it
elements_match = re.search(r"elements\s+\(list\s+(.*?)\)\)", data)

if not elements_match:
    print("Could not find the main list of music elements.")
    exit()

elements_list = elements_match.group(1)

# Now, find all events sequentially
# This regex is an approximate way to break the list into events
events = re.findall(r"\((make-music.*?\))\s*(?=\(make-music|\Z)", elements_list)

for event_scheme in events:
    if "NoteEvent" in event_scheme:
        # Extract pitch components from the NoteEvent string
        pitch_match = re.search(r"make-pitch\s+(-?\d+)\s+(-?\d+)\s+(\d+)", event_scheme)
        if pitch_match:
            octave, alter, name = map(int, pitch_match.groups())
            midi = calculate_midi(octave, alter, name)
            print(f"NoteEvent: MIDI {midi} (Octave:{octave}, Alter:{alter}, Name:{name})")
        else:
            print("NoteEvent: Pitch information missing.")

    elif "RestEvent" in event_scheme:
        print("RestEvent: #f")